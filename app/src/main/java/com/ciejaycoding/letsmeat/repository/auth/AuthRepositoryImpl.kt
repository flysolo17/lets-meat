package com.ciejaycoding.letsmeat.repository.auth

import android.app.Activity
import android.content.Context
import android.widget.Toast

import com.ciejaycoding.letsmeat.models.Clients
import com.ciejaycoding.letsmeat.utils.CLIENTS_TABLE
import com.ciejaycoding.letsmeat.utils.UiState
import com.google.android.gms.tasks.Task
import com.google.firebase.FirebaseException
import com.google.firebase.FirebaseTooManyRequestsException
import com.google.firebase.auth.*
import com.google.firebase.auth.PhoneAuthProvider.ForceResendingToken
import com.google.firebase.auth.PhoneAuthProvider.OnVerificationStateChangedCallbacks
import com.google.firebase.firestore.FirebaseFirestore
import io.grpc.stub.ClientResponseObserver
import java.util.concurrent.TimeUnit
class AuthRepositoryImpl(private val auth : FirebaseAuth,private val firestore: FirebaseFirestore,val context: Context) : AuthRepository {

    /**
     * This method allows the user to send verification code.
     * @param phone This parameter is needed to send verification code.
     */
    private var clients : Clients ? = null
    override suspend fun verifyPhone(activity: Activity,phone: String, result: (UiState<String>) -> Unit) {
        result.invoke(UiState.Loading)
        val options = PhoneAuthOptions.newBuilder(auth)
            .setPhoneNumber("+63$phone") // Phone number to verify
            .setTimeout(60L, TimeUnit.SECONDS) // Timeout and unit
            .setActivity(activity) // Activity (for callback binding)
            .setCallbacks(object : OnVerificationStateChangedCallbacks() {
                override fun onVerificationCompleted(phoneAuthCredential: PhoneAuthCredential) {
                    Toast.makeText(activity,"Completed!",Toast.LENGTH_SHORT).show()
                }
                override fun onVerificationFailed(e: FirebaseException) {
                    if (e is FirebaseAuthInvalidCredentialsException) {
                        result.invoke(UiState.Failed(e.message!!))
                    } else if (e is FirebaseTooManyRequestsException) {
                        result.invoke(UiState.Failed(e.message!!))
                    }
                }
                override fun onCodeSent(s: String, forceResendingToken: ForceResendingToken) {
                    result.invoke(UiState.Success(s))
                }
            })
            .build()
        PhoneAuthProvider.verifyPhoneNumber(options)
    }
    /**
     * This method verifies the OTP that the user inputs.
     * @param verificationCode This parameter is autogenerated by firebase phone auth you will receive this code via text message
     * @param OTP This parameter is comes from user input. This parameter should match otherwise the user phone number shouldn't verified
     */
    override suspend fun verifyOTP(
        verificationCode: String,
        OTP: String,
        name: String,
        result: (UiState<String>) -> Unit
    ) {
        val phoneAuthCredential = PhoneAuthProvider.getCredential(verificationCode, OTP)
        result.invoke(UiState.Loading)
        auth.signInWithCredential(phoneAuthCredential)
            .addOnCompleteListener { task: Task<AuthResult?> ->
                if (task.isSuccessful) {
                    val user: FirebaseUser = auth.currentUser!!
                    val client = Clients(id= user.uid,"",user.phoneNumber,name)
                    firestore.collection(CLIENTS_TABLE).document(client.id!!)
                        .set(client)
                        .addOnCompleteListener {
                            if (it.isSuccessful) {
                                result.invoke(UiState.Success("Account Created Successfully"))
                            } else {
                                result.invoke(UiState.Failed("Account Creation Failed"))
                            }
                        }.addOnFailureListener {
                            result.invoke(UiState.Failed(it.message!!))
                        }
                } else {
                    if (task.exception is FirebaseAuthInvalidCredentialsException) {
                        result.invoke(UiState.Failed("Invalid Credential!"))
                    } else {
                        result.invoke(UiState.Failed("Auth Failed! "))
                    }
                }
            }.addOnFailureListener {
                result.invoke(UiState.Failed("Authentication Failed:  ${it.message}"))
            }
    }

    override suspend fun getProfile(uid: String, result: (UiState<Clients>) -> Unit) {
        clients?.let {
            result.invoke(UiState.Success(it))
            Toast.makeText(context,"from cache",Toast.LENGTH_SHORT).show()
            return
        }
        result.invoke(UiState.Loading)
        firestore.collection(CLIENTS_TABLE).document(uid)
            .get()
            .addOnSuccessListener {snapshot ->
                if (snapshot.exists()) {
                    val clients = snapshot.toObject(Clients::class.java)
                    Toast.makeText(context,"from network",Toast.LENGTH_SHORT).show()
                    clients?.let {
                        this.clients = it
                        result.invoke(UiState.Success(it))
                    }
                } else {
                    result.invoke(UiState.Failed("User does not exists!"))
                }
            }.addOnFailureListener {
                result.invoke(UiState.Failed(it.message!!))
            }
    }
}